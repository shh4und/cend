# ==============================================================================
# Makefile for Evaluating Neuron Reconstructions with DiademMetric
#
# This Makefile automates the comparison between SWCs generated by the pipeline
# and a Gold Standard set, producing a CSV file with the scores and the
# parameters used for each reconstruction.
# ==============================================================================

# --- Configuration Variables ---
# Adjust these paths to match your directory structure.
DIADEM_JAR    := ./metrics/DiademMetric/DiademMetric.jar
GOLD_DIR      := ./data/GoldStandardReconstructions
RESULTS_DIR   := ./results_swc
SCORES_DIR    := ./scores
SCORES_FN	  := scores.csv
SCORES_FILE   := $(SCORES_DIR)/$(SCORES_FN)

# --- Dataset Parameters ---
N_IMAGES      := 9
INDICES       := $(shell seq 1 $(N_IMAGES))

# --- CSV Header ---
# The order of columns here must match the extraction order below.
CSV_HEADER    := "ImageID,DiademScore,SourceImage,SigMax,SigMin,SigStep,NeuronThreshold,PruningThreshold,SmoothingFactor,NumPointsPerBranch"

# --- Main Targets ---

# The default target is 'all', which runs the evaluation.
# Typing 'make' in the terminal will start the process.
.PHONY: all
all: evaluate

# Target to run the evaluation on all files and generate the CSV.
.PHONY: evaluate
evaluate:
	@echo "--- Starting Evaluation of Reconstructions ---"
	@mkdir -p $(SCORES_DIR)
	@echo "$(CSV_HEADER)" > $(SCORES_FILE)
	
	@echo "Evaluating $(N_IMAGES) images..."
	@for i in $(INDICES); do \
		GOLD_SWC="$(GOLD_DIR)/OP_$${i}.swc"; \
		TEST_SWC="$(RESULTS_DIR)/OP_$${i}_reconstruction.swc"; \
		META_FILE="$(RESULTS_DIR)/OP_$${i}_reconstruction.meta"; \
		IMAGE_ID="OP_$${i}"; \
		\
		if [ -f "$$TEST_SWC" ]; then \
			SCORE=$$(java -jar $(DIADEM_JAR) -G "$$GOLD_SWC" -T "$$TEST_SWC" -D 5 | grep 'Score:' | awk '{print $$2}' || echo "ERROR"); \
			\
			if [ -f "$$META_FILE" ]; then \
				SOURCE_IMG=$$(grep 'source_image:' "$$META_FILE" | awk '{print $$2}'); \
				SIG_MAX=$$(grep 'sig_max:' "$$META_FILE" | awk '{print $$2}'); \
				SIG_MIN=$$(grep 'sig_min:' "$$META_FILE" | awk '{print $$2}'); \
				SIG_STEP=$$(grep 'sig_step:' "$$META_FILE" | awk '{print $$2}'); \
				NEURON_THRESH=$$(grep 'neuron_threshold:' "$$META_FILE" | awk '{print $$2}'); \
				PRUNING_THRESH=$$(grep 'pruning_threshold:' "$$META_FILE" | awk '{print $$2}'); \
				SMOOTH_FACTOR=$$(grep 'smoothing_factor:' "$$META_FILE" | awk '{print $$2}'); \
				NUM_POINTS=$$(grep 'num_points_per_branch:' "$$META_FILE" | awk '{print $$2}'); \
				\
				CSV_LINE="$$IMAGE_ID,$$SCORE,$$SOURCE_IMG,$$SIG_MAX,$$SIG_MIN,$$SIG_STEP,$$NEURON_THRESH,$$PRUNING_THRESH,$$SMOOTH_FACTOR,$$NUM_POINTS"; \
			else \
				CSV_LINE="$$IMAGE_ID,$$SCORE,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND"; \
			fi; \
			echo "  -> $$IMAGE_ID | Score: $$SCORE"; \
		else \
			echo "  -> ERROR: File not found: $$TEST_SWC. Skipping."; \
			CSV_LINE="$$IMAGE_ID,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND,NOT_FOUND"; \
		fi; \
		echo "$$CSV_LINE" >> $(SCORES_FILE); \
	done
	@echo "--- Evaluation Complete ---"
	@echo "Results saved to: $(SCORES_FILE)"
	@echo "--- Preview of $(SCORES_FILE) ---"
	@cat $(SCORES_FILE) | column -s, -t

# Target to clean up generated files.
# Run 'make clean' to remove the scores directory and file.
.PHONY: clean
clean:
	@echo "Cleaning up generated scores file..."
	@rm -f $(SCORES_FILE)
	@echo "Cleanup complete."