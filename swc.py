import logging
from typing import List, Tuple

# Set up a logger for this module
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class SWCFile:
    """A helper class to create, manage, and write 3D neuron morphology data to an SWC file."""

    def __init__(self, filename: str):
        """
        Initializes the SWCFile object.

        Args:
            filename (str): The path to the output .swc file.
        """
        self.filename: str = filename
        self.data: List[Tuple[int, int, float, float, float, float, int]] = []

    def add_point(
        self,
        identity: int,
        structure_type: int,
        x: float,
        y: float,
        z: float,
        radius: float,
        parent_identity: int
    ) -> None:
        """
        Adds a single data point (node) to the SWC structure.

        Performs validation to ensure node IDs are valid and parent IDs
        are less than the current node's ID.

        Args:
            identity (int): The node's unique identifier (must be > 0).
            structure_type (int): The type of structure (e.g., 2 for axon).
            x (float): The x-coordinate.
            y (float): The y-coordinate.
            z (float): The z-coordinate.
            radius (float): The radius at this node.
            parent_identity (int): The ID of the parent node (-1 for root).

        Raises:
            ValueError: If identity or parent_identity values are invalid.
        """
        # SWC format validation: parent ID must be -1 or a positive integer smaller than the current ID.
        if identity <= 0 or (parent_identity != -1 and (parent_identity <= 0 or parent_identity >= identity)):
            error_msg = (
                f"Invalid SWC node relationship: "
                f"ID={identity}, Parent ID={parent_identity}. "
                f"Parent ID must be -1 or a positive integer < ID."
            )
            raise ValueError(error_msg)
        self.data.append((identity, structure_type, x, y, z, radius, parent_identity))

    def write_file(self) -> bool:
        """
        Sorts the data by node ID and writes it to the specified file.

        Returns:
            bool: True upon successful write.
        """
        # Sorting by identity is crucial for a well-formed SWC file
        self.data.sort(key=lambda point: point[0])
        
        try:
            with open(self.filename, 'w') as file:
                file.write("# Generated by neuron reconstruction pipeline\n")
                file.write("# Format: node_id, structure_type, x, y, z, radius, parent_id\n")
                for point in self.data:
                    line = " ".join(map(str, point)) + "\n"
                    file.write(line)
            logger.info(f"SWC file saved at: {self.filename}")
            return True
        except IOError as e:
            logger.error(f"Failed to write SWC file {self.filename}: {e}")
            return False